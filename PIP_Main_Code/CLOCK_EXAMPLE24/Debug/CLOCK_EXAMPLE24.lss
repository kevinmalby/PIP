
CLOCK_EXAMPLE24.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000002dc  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a0  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000448  00000000  00000000  00002ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000c06  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00005a64  00000000  00000000  00003b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000d2b  00000000  00000000  00009582  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035f6  00000000  00000000  0000a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a0c  00000000  00000000  0000d8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a54  00000000  00000000  0000e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000166a  00000000  00000000  0000fd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 005710ef  00000000  00000000  0001136e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000003e8  00000000  00000000  00582460  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf fe 58 	sub	pc,pc,-424

Disassembly of section .text:

80002004 <board_init>:
80002004:	d4 01       	pushm	lr
80002006:	30 3b       	mov	r11,3
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002008:	33 bc       	mov	r12,59
8000200a:	f0 1f 00 1e 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	30 3b       	mov	r11,3
80002010:	33 cc       	mov	r12,60
80002012:	f0 1f 00 1c 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	30 3b       	mov	r11,3
80002018:	33 dc       	mov	r12,61
8000201a:	f0 1f 00 1a 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 3b       	mov	r11,3
80002020:	33 ec       	mov	r12,62
80002022:	f0 1f 00 18 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002026:	30 3b       	mov	r11,3
80002028:	33 3c       	mov	r12,51
8000202a:	f0 1f 00 16 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000202e:	30 3b       	mov	r11,3
80002030:	33 4c       	mov	r12,52
80002032:	f0 1f 00 14 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002036:	30 3b       	mov	r11,3
80002038:	33 5c       	mov	r12,53
8000203a:	f0 1f 00 12 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000203e:	30 3b       	mov	r11,3
80002040:	33 6c       	mov	r12,54
80002042:	f0 1f 00 10 	mcall	80002080 <board_init+0x7c>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002046:	30 0b       	mov	r11,0
80002048:	35 8c       	mov	r12,88
8000204a:	f0 1f 00 0e 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000204e:	30 0b       	mov	r11,0
80002050:	35 5c       	mov	r12,85
80002052:	f0 1f 00 0c 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80002056:	30 0b       	mov	r11,0
80002058:	35 2c       	mov	r12,82
8000205a:	f0 1f 00 0a 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000205e:	30 0b       	mov	r11,0
80002060:	31 4c       	mov	r12,20
80002062:	f0 1f 00 08 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80002066:	30 0b       	mov	r11,0
80002068:	31 9c       	mov	r12,25
8000206a:	f0 1f 00 06 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000206e:	30 0b       	mov	r11,0
80002070:	31 ac       	mov	r12,26
80002072:	f0 1f 00 04 	mcall	80002080 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80002076:	30 0b       	mov	r11,0
80002078:	31 bc       	mov	r12,27
8000207a:	f0 1f 00 02 	mcall	80002080 <board_init+0x7c>
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000207e:	d8 02       	popm	pc
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	20 b8       	sub	r8,11

80002084 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002084:	fe 68 14 00 	mov	r8,-125952
80002088:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000208a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000208e:	91 09       	st.w	r8[0x0],r9
}
80002090:	5e fc       	retal	r12
80002092:	d7 03       	nop

80002094 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002094:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002096:	e0 68 8a 3f 	mov	r8,35391
8000209a:	ea 18 01 f7 	orh	r8,0x1f7
8000209e:	10 3c       	cp.w	r12,r8
800020a0:	e0 88 00 06 	brls	800020ac <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800020a4:	30 1c       	mov	r12,1
800020a6:	f0 1f 00 04 	mcall	800020b4 <flashc_set_bus_freq+0x20>
800020aa:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800020ac:	30 0c       	mov	r12,0
800020ae:	f0 1f 00 02 	mcall	800020b4 <flashc_set_bus_freq+0x20>
800020b2:	d8 02       	popm	pc
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	20 84       	sub	r4,8

800020b8 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800020b8:	f8 08 16 05 	lsr	r8,r12,0x5
800020bc:	a9 68       	lsl	r8,0x8
800020be:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800020c2:	16 99       	mov	r9,r11
800020c4:	e2 19 00 04 	andl	r9,0x4,COH
800020c8:	c0 70       	breq	800020d6 <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
800020ca:	30 19       	mov	r9,1
800020cc:	f2 0c 09 49 	lsl	r9,r9,r12
800020d0:	f1 49 00 74 	st.w	r8[116],r9
800020d4:	c0 68       	rjmp	800020e0 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
800020d6:	30 19       	mov	r9,1
800020d8:	f2 0c 09 49 	lsl	r9,r9,r12
800020dc:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800020e0:	16 99       	mov	r9,r11
800020e2:	e2 19 00 80 	andl	r9,0x80,COH
800020e6:	c2 40       	breq	8000212e <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
800020e8:	16 99       	mov	r9,r11
800020ea:	e2 19 01 80 	andl	r9,0x180,COH
800020ee:	c0 90       	breq	80002100 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800020f0:	30 19       	mov	r9,1
800020f2:	f2 0c 09 49 	lsl	r9,r9,r12
800020f6:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800020fa:	f1 49 00 b8 	st.w	r8[184],r9
800020fe:	c1 88       	rjmp	8000212e <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002100:	16 99       	mov	r9,r11
80002102:	e2 19 02 80 	andl	r9,0x280,COH
80002106:	c0 90       	breq	80002118 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80002108:	30 19       	mov	r9,1
8000210a:	f2 0c 09 49 	lsl	r9,r9,r12
8000210e:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002112:	f1 49 00 b8 	st.w	r8[184],r9
80002116:	c0 c8       	rjmp	8000212e <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
80002118:	16 99       	mov	r9,r11
8000211a:	e2 19 03 80 	andl	r9,0x380,COH
8000211e:	c0 80       	breq	8000212e <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 49 	lsl	r9,r9,r12
80002126:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000212a:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
8000212e:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002132:	c1 50       	breq	8000215c <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002134:	e2 1b 00 02 	andl	r11,0x2,COH
80002138:	c0 70       	breq	80002146 <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000213a:	30 19       	mov	r9,1
8000213c:	f2 0c 09 49 	lsl	r9,r9,r12
80002140:	f1 49 00 54 	st.w	r8[84],r9
80002144:	c0 68       	rjmp	80002150 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80002146:	30 19       	mov	r9,1
80002148:	f2 0c 09 49 	lsl	r9,r9,r12
8000214c:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80002150:	30 19       	mov	r9,1
80002152:	f2 0c 09 49 	lsl	r9,r9,r12
80002156:	f1 49 00 44 	st.w	r8[68],r9
8000215a:	c0 68       	rjmp	80002166 <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000215c:	30 19       	mov	r9,1
8000215e:	f2 0c 09 49 	lsl	r9,r9,r12
80002162:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002166:	30 19       	mov	r9,1
80002168:	f2 0c 09 4c 	lsl	r12,r9,r12
8000216c:	91 1c       	st.w	r8[0x4],r12
}
8000216e:	5e fc       	retal	r12

80002170 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002170:	fe 78 08 00 	mov	r8,-63488
80002174:	e0 69 00 83 	mov	r9,131
80002178:	f2 0c 01 0c 	sub	r12,r9,r12
8000217c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002180:	f2 ca ff c0 	sub	r10,r9,-64
80002184:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002188:	58 08       	cp.w	r8,0
8000218a:	c0 21       	brne	8000218e <_get_interrupt_handler+0x1e>
8000218c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000218e:	f0 08 12 00 	clz	r8,r8
80002192:	48 5a       	lddpc	r10,800021a4 <_get_interrupt_handler+0x34>
80002194:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002198:	f0 08 11 1f 	rsub	r8,r8,31
8000219c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000219e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021a2:	5e fc       	retal	r12
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	26 00       	sub	r0,96

800021a8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800021a8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800021ac:	fe c0 fd ac 	sub	r0,pc,-596

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800021b0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800021b4:	d5 53       	csrf	0x15
  cp      r0, r1
800021b6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800021b8:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800021ba:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800021bc:	c0 72       	brcc	800021ca <idata_load_loop_end>
  st.d    r0++, r4
800021be:	fe c2 fb 1e 	sub	r2,pc,-1250

800021c2 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800021c2:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800021c4:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800021c6:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021c8:	cf d3       	brcs	800021c2 <idata_load_loop>

800021ca <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800021ca:	30 80       	mov	r0,8
  mov     r2, 0
800021cc:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800021d0:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021d2:	c0 62       	brcc	800021de <udata_clear_loop_end>
  brlo    udata_clear_loop
800021d4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800021d6:	30 03       	mov	r3,0

800021d8 <udata_clear_loop>:
800021d8:	a1 22       	st.d	r0++,r2
800021da:	02 30       	cp.w	r0,r1
800021dc:	cf e3       	brcs	800021d8 <udata_clear_loop>

800021de <udata_clear_loop_end>:
800021de:	fe cf ff 6e 	sub	pc,pc,-146
800021e2:	d7 03       	nop

800021e4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800021e4:	d4 01       	pushm	lr

	if (pbb_shift > 0)
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
800021e6:	fe 78 0c 00 	mov	r8,-62464
800021ea:	e0 69 00 80 	mov	r9,128
800021ee:	ea 19 80 80 	orh	r9,0x8080
800021f2:	91 19       	st.w	r8[0x4],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800021f4:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
800021f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021fa:	c2 51       	brne	80002244 <sysclk_init+0x60>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800021fc:	fe 78 0c 00 	mov	r8,-62464
80002200:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80002202:	e2 18 00 80 	andl	r8,0x80,COH
80002206:	c1 31       	brne	8000222c <sysclk_init+0x48>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002208:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000220c:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000220e:	fe 78 0c 00 	mov	r8,-62464
80002212:	e0 6a 03 07 	mov	r10,775
80002216:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002218:	70 0a       	ld.w	r10,r8[0x0]
8000221a:	a3 aa       	sbr	r10,0x2
8000221c:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000221e:	e3 b9 00 00 	mtsr	0x0,r9
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80002222:	10 99       	mov	r9,r8
80002224:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002226:	e2 18 00 80 	andl	r8,0x80,COH
8000222a:	cf d0       	breq	80002224 <sysclk_init+0x40>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000222c:	fe 78 0c 00 	mov	r8,-62464
80002230:	e0 69 02 05 	mov	r9,517
80002234:	ea 19 3f 0a 	orh	r9,0x3f0a
80002238:	91 89       	st.w	r8[0x20],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000223a:	10 99       	mov	r9,r8
8000223c:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
8000223e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002242:	cf d0       	breq	8000223c <sysclk_init+0x58>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002244:	e0 6c 8a 40 	mov	r12,35392
80002248:	ea 1c 01 f7 	orh	r12,0x1f7
8000224c:	f0 1f 00 08 	mcall	8000226c <sysclk_init+0x88>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002250:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002254:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80002256:	fe 78 0c 00 	mov	r8,-62464
8000225a:	70 0a       	ld.w	r10,r8[0x0]
8000225c:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80002260:	a1 ba       	sbr	r10,0x1
	AVR32_PM.mcctrl = mcctrl;
80002262:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002264:	e3 b9 00 00 	mtsr	0x0,r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002268:	d8 02       	popm	pc
8000226a:	00 00       	add	r0,r0
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	20 94       	sub	r4,9

80002270 <main>:
#include <gpio.h>
#include <sysclk.h>
#include <conf_example2.h>

int main(void)
{
80002270:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_init();
80002272:	f0 1f 00 1a 	mcall	800022d8 <main+0x68>
	board_init();
80002276:	f0 1f 00 1a 	mcall	800022dc <main+0x6c>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000227a:	fe 78 0c 00 	mov	r8,-62464
8000227e:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80002280:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002284:	c2 31       	brne	800022ca <main+0x5a>
80002286:	fe 78 0c 00 	mov	r8,-62464
8000228a:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000228c:	e2 18 00 80 	andl	r8,0x80,COH
80002290:	c1 21       	brne	800022b4 <main+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002292:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002296:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002298:	fe 78 0c 00 	mov	r8,-62464
8000229c:	e0 6a 03 07 	mov	r10,775
800022a0:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800022a2:	70 0a       	ld.w	r10,r8[0x0]
800022a4:	a3 aa       	sbr	r10,0x2
800022a6:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800022a8:	e3 b9 00 00 	mtsr	0x0,r9
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800022ac:	71 59       	ld.w	r9,r8[0x54]
800022ae:	e2 19 00 80 	andl	r9,0x80,COH
800022b2:	cf d0       	breq	800022ac <main+0x3c>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
800022b4:	fe 78 0c 00 	mov	r8,-62464
800022b8:	e0 69 02 05 	mov	r9,517
800022bc:	ea 19 3f 0a 	orh	r9,0x3f0a
800022c0:	91 89       	st.w	r8[0x20],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800022c2:	71 59       	ld.w	r9,r8[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
800022c4:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800022c8:	cf d0       	breq	800022c2 <main+0x52>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800022ca:	31 69       	mov	r9,22
800022cc:	fe 78 0c 00 	mov	r8,-62464
800022d0:	f1 49 00 68 	st.w	r8[104],r9
800022d4:	c0 08       	rjmp	800022d4 <main+0x64>
800022d6:	00 00       	add	r0,r0
800022d8:	80 00       	ld.sh	r0,r0[0x0]
800022da:	21 e4       	sub	r4,30
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	20 04       	sub	r4,0

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	c3 5e       	rcall	80002170 <_get_interrupt_handler>
80002508:	58 0c       	cp.w	r12,0
8000250a:	f8 0f 17 10 	movne	pc,r12
8000250e:	d6 03       	rete

80002510 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	c2 fe       	rcall	80002170 <_get_interrupt_handler>
80002514:	58 0c       	cp.w	r12,0
80002516:	f8 0f 17 10 	movne	pc,r12
8000251a:	d6 03       	rete

8000251c <_int2>:
8000251c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	c2 9e       	rcall	80002170 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	58 0c       	cp.w	r12,0
80002522:	f8 0f 17 10 	movne	pc,r12
80002526:	d6 03       	rete

80002528 <_int3>:
80002528:	30 3c       	mov	r12,3
8000252a:	c2 3e       	rcall	80002170 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	f8 0f 17 10 	movne	pc,r12
80002532:	d6 03       	rete
80002534:	d7 03       	nop
80002536:	d7 03       	nop
80002538:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d7 03       	nop
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
